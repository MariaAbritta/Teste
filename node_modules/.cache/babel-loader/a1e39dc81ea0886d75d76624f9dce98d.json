{"ast":null,"code":"var _jsxFileName = \"/home/abritta/Documentos/teste/src/components/Clock/Clock.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext //Usaremos para aceitar um objeto de contexto (o valor retornado de React.createContext) e retorna o valor atual do contexto.\n, useEffect //Usaremos para aceitar uma função que contém um código imperativo.\n, useRef //Usaremos para manter alguns valor mutável em torno do código.\n, useState //Usaremos para retornar um valor/função para atualizar algum valor e definir nosso estado em nosso código.\n} from 'react';\nimport { func } from 'prop-types';\nimport useWindowSize from 'hooks/useWindowSize'; //Ajudar com a responsividade, com uma necessidade muito comum em obter o tamanho atual da janela do navegador. Este gancho retorna um objeto contendo a largura e altura da janela. \n\nimport cyclesContext from 'contexts/cycles.context';\nimport { remainingTimeInMinutes //Tempo restante em minutos\n, remainingTimeInSeconds } from 'utils/helpers'; //Tempo restante em segundos\n\nimport * as S from './Clock.style'; //TRazer o círculo do cronômetro e todo o seu style. \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Clock({\n  setPomodOrcCycleType\n}) {\n  _s();\n\n  const {\n    width\n  } = useWindowSize();\n  const orderedCycles = useContext(cyclesContext);\n  const [remainingTime, setRemainingTime] = useState(orderedCycles[0].duration); //Declarando as constantes e pondo useState em todas elas.\n\n  const [remainingMin, setRemainingMin] = useState(0);\n  const [remainingSecs, setRemainingSecs] = useState(0);\n  const [timeRunning, setTimeRunning] = useState(false);\n  const [pomodOrcCycles, setPomodOrcCycles] = useState(0);\n  const [scalePercentual, setScalePercentual] = useState(0);\n\n  const pauseClock = () => setTimeRunning(false); //Booleano de que quando parar o relógio, o runing dele se torna falso, então ele para.\n\n\n  const startClock = () => setTimeRunning(true); //booleano de que quando der start no relógio, o runing dele se torna verdadeiro, então ele volta a contar.\n\n\n  const restartClock = () => {\n    //QUando for resetar, ele pede esse update do ciclo do relógio e suas informações, para o relógio voltar a fazer o ciclo de 25/5/25/5/25/5/25/15\n    cycleInformationUpdate(0);\n    pauseClock();\n    setPomodOrcCycles(0);\n  };\n\n  const cycleInformationUpdate = pomodOrcCycle => {\n    //Declarar a constante cycleInformationUpdate pra ela suportar o pomodOrcCycle que descreve os valores que a variável pode ter, que no caso só é números.\n    setRemainingTime(orderedCycles[pomodOrcCycle].duration); //Definindo setRemainingTime como uma ordem do ciclo, que é o nosso pomodoro, sendo isso tudo a duração.\n\n    setPomodOrcCycleType(orderedCycles[pomodOrcCycle].type);\n  };\n\n  const handleClick = () => {\n    //Serve para clicar, manuseio do timing.\n    setTimeRunning(!timeRunning); //Usamos o ! aqui como uma maneira de dizer ao compilador \"esta expressão não pode ser null ou undefined aqui, então não reclame sobre a possibilidade de ser null ou undefined.\".\n  };\n\n  React.useEffect(() => {\n    //COntagem dos segundos, sendo passado de 1 por 1.\n    if (timeRunning) {\n      const interval = setInterval(() => {\n        setRemainingTime(previous => {\n          if (previous === 0) return previous;\n          return previous - 1;\n        });\n      }, 1000); //Agendamos um novo intervalo para ser executado a cada segundo dentro do gancho useEffect. Isso será agendado assim que o componente React for montado pela primeira vez. Para limpar o intervalo corretamente, retornamos clearInterval do gancho useEffect, passando o intervalo.\n\n      return () => clearInterval(interval);\n    }\n  }, [timeRunning]);\n  useEffect(() => {\n    setRemainingMin(remainingTimeInMinutes(remainingTime));\n    setRemainingSecs(remainingTimeInSeconds(remainingTime));\n    setScalePercentual((100 - remainingTime * 100 / orderedCycles[pomodOrcCycles].duration) / 100); //Definindo o tempo restante dos minutos e dos segundos com a constante do helpers, dizendo que as duas fazem parte do remeaning time.\n\n    const cycleEnded = remainingTime === 0;\n\n    if (cycleEnded) {\n      pauseClock();\n      setPomodOrcCycles(previousState => previousState + 1); //Quando o ciclo acabar, o tempo restante é = 0, então o relógio para e muda o estado pra +1.\n    }\n  }, [remainingTime]);\n  useEffect(() => {\n    //Definimos os ciclos do relógio, dando que o primeiro ciclo é menor que 1, e que deve resetar esse ciclo quando ele tiver completado os 5 ciclos.\n    const firstCycle = pomodOrcCycles < 1;\n    const shouldRestart = pomodOrcCycles > 5;\n\n    if (!firstCycle) {\n      //Se a primeira cena não retornar nada, reseta o ciclo até ele enviar algo.\n      if (shouldRestart) {\n        restartClock();\n        return;\n      }\n\n      cycleInformationUpdate(pomodOrcCycles);\n      startClock(); //Atualiza a informação do ciclo do pomodoro e faz o relógio dar play depois de atualizar seus ciclos.\n    }\n  }, [pomodOrcCycles]);\n  const scaleRef = useRef(null);\n  const [scaleCircleDiameter, setScaleCircleDiameter] = useState(0);\n  const [scaleCircleRadius, setScaleCircleRadius] = useState(0);\n\n  const setScaleDimensions = () => {\n    if (!scaleRef.current || !scaleRef.current.clientWidth) return;\n    const scaleWrapperWidth = scaleRef.current.clientWidth;\n    setScaleCircleDiameter(scaleWrapperWidth - 40);\n    setScaleCircleRadius(scaleCircleDiameter / 2);\n  };\n\n  useEffect(() => {\n    setScaleDimensions();\n  }, [scaleRef.current, width]); //Parte que encontramos na internet de como fazer o timer ser do formato circular.\n\n  return /*#__PURE__*/_jsxDEV(S.ClockWrapper, {\n    children: /*#__PURE__*/_jsxDEV(S.Frame, {\n      children: /*#__PURE__*/_jsxDEV(S.Inside, {\n        children: [/*#__PURE__*/_jsxDEV(S.Content, {\n          children: [/*#__PURE__*/_jsxDEV(S.Time, {\n            fontSizeInPixels: Math.round(scaleCircleDiameter / 3.33),\n            children: `${remainingMin}:${remainingSecs}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(S.Button, {\n            fontSizeInPixels: Math.round(scaleCircleDiameter / 12),\n            marginTop: Math.round(scaleCircleDiameter * 0.03),\n            onClick: handleClick,\n            children: timeRunning ? 'Pause' : 'Start'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(S.Gauge, {\n          circleDiameter: scaleCircleDiameter,\n          percentualPassed: scalePercentual,\n          ref: scaleRef,\n          children: scaleCircleRadius > 0 && /*#__PURE__*/_jsxDEV(\"svg\", {\n            version: \"1.1\",\n            xmlns: \"http://www.w3.org/2000/svg\",\n            children: /*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: \"50%\",\n              cy: \"50%\",\n              r: scaleCircleRadius\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n} //Parte que encontramos na internet de como fazer o timer ser do formato circular.\n\n\n_s(Clock, \"eCCaC7ZSMFbdzAd4+GDTwPeonDA=\", false, function () {\n  return [useWindowSize];\n});\n\n_c = Clock;\nClock.propTypes = {\n  setPomodOrcCycleType: func\n};\nexport default Clock;\n\nvar _c;\n\n$RefreshReg$(_c, \"Clock\");","map":{"version":3,"sources":["/home/abritta/Documentos/teste/src/components/Clock/Clock.tsx"],"names":["React","useContext","useEffect","useRef","useState","func","useWindowSize","cyclesContext","remainingTimeInMinutes","remainingTimeInSeconds","S","Clock","setPomodOrcCycleType","width","orderedCycles","remainingTime","setRemainingTime","duration","remainingMin","setRemainingMin","remainingSecs","setRemainingSecs","timeRunning","setTimeRunning","pomodOrcCycles","setPomodOrcCycles","scalePercentual","setScalePercentual","pauseClock","startClock","restartClock","cycleInformationUpdate","pomodOrcCycle","type","handleClick","interval","setInterval","previous","clearInterval","cycleEnded","previousState","firstCycle","shouldRestart","scaleRef","scaleCircleDiameter","setScaleCircleDiameter","scaleCircleRadius","setScaleCircleRadius","setScaleDimensions","current","clientWidth","scaleWrapperWidth","Math","round","propTypes"],"mappings":"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","sourcesContent":["import React, {\n  useContext, //Usaremos para aceitar um objeto de contexto (o valor retornado de React.createContext) e retorna o valor atual do contexto.\n  useEffect, //Usaremos para aceitar uma função que contém um código imperativo.\n  useRef, //Usaremos para manter alguns valor mutável em torno do código.\n  useState, //Usaremos para retornar um valor/função para atualizar algum valor e definir nosso estado em nosso código.\n  Dispatch, //Usaremos para despachar ações e acionar mudanças de estado.\n  SetStateAction } from 'react';\nimport { func } from 'prop-types';\n\nimport useWindowSize from 'hooks/useWindowSize'; //Ajudar com a responsividade, com uma necessidade muito comum em obter o tamanho atual da janela do navegador. Este gancho retorna um objeto contendo a largura e altura da janela. \nimport cyclesContext from 'contexts/cycles.context';\nimport { \n  remainingTimeInMinutes, //Tempo restante em minutos\n  remainingTimeInSeconds } from 'utils/helpers'; //Tempo restante em segundos\nimport * as S from './Clock.style'; //TRazer o círculo do cronômetro e todo o seu style. \n\ntype ClockProps = {\n  setPomodOrcCycleType: Dispatch<SetStateAction<number>>, //Dispatch usado para assionar as mudanças de estado do estado inical do SetStateAction.\n}\nfunction Clock({ setPomodOrcCycleType }: ClockProps): JSX.Element {\n  const { width } = useWindowSize();\n  const orderedCycles = useContext(cyclesContext);\n\n  const [remainingTime, setRemainingTime] = useState(orderedCycles[0].duration); //Declarando as constantes e pondo useState em todas elas.\n  const [remainingMin, setRemainingMin] = useState<number | string>(0);\n  const [remainingSecs, setRemainingSecs] = useState<number | string>(0);\n  const [timeRunning, setTimeRunning] = useState(false);\n  const [pomodOrcCycles, setPomodOrcCycles] = useState(0);\n  const [scalePercentual, setScalePercentual] = useState(0);\n\n  const pauseClock = () => setTimeRunning(false); //Booleano de que quando parar o relógio, o runing dele se torna falso, então ele para.\n  const startClock = () => setTimeRunning(true); //booleano de que quando der start no relógio, o runing dele se torna verdadeiro, então ele volta a contar.\n  const restartClock = () => { //QUando for resetar, ele pede esse update do ciclo do relógio e suas informações, para o relógio voltar a fazer o ciclo de 25/5/25/5/25/5/25/15\n    cycleInformationUpdate(0);\n    pauseClock();\n    setPomodOrcCycles(0);\n  };\n  const cycleInformationUpdate = (pomodOrcCycle: number) => { //Declarar a constante cycleInformationUpdate pra ela suportar o pomodOrcCycle que descreve os valores que a variável pode ter, que no caso só é números.\n    setRemainingTime(orderedCycles[pomodOrcCycle].duration); //Definindo setRemainingTime como uma ordem do ciclo, que é o nosso pomodoro, sendo isso tudo a duração.\n    setPomodOrcCycleType(orderedCycles[pomodOrcCycle].type); \n  };\n\n  const handleClick = () => { //Serve para clicar, manuseio do timing.\n    setTimeRunning(!timeRunning); //Usamos o ! aqui como uma maneira de dizer ao compilador \"esta expressão não pode ser null ou undefined aqui, então não reclame sobre a possibilidade de ser null ou undefined.\".\n  }\n\n  React.useEffect(() => { //COntagem dos segundos, sendo passado de 1 por 1.\n    if (timeRunning) {\n      const interval = setInterval(() => { \n        setRemainingTime((previous) => {\n          if (previous === 0) return previous;\n          return previous - 1;\n        });\n      }, 1000);\n      //Agendamos um novo intervalo para ser executado a cada segundo dentro do gancho useEffect. Isso será agendado assim que o componente React for montado pela primeira vez. Para limpar o intervalo corretamente, retornamos clearInterval do gancho useEffect, passando o intervalo.\n      return () => clearInterval(interval);\n    }\n  }, [timeRunning]);\n\n  useEffect(() => {\n    setRemainingMin(remainingTimeInMinutes(remainingTime));\n    setRemainingSecs(remainingTimeInSeconds(remainingTime));\n    setScalePercentual( (100 - (remainingTime * 100 / orderedCycles[pomodOrcCycles].duration)) / 100 );\n    //Definindo o tempo restante dos minutos e dos segundos com a constante do helpers, dizendo que as duas fazem parte do remeaning time.\n    const cycleEnded = remainingTime === 0;\n    if (cycleEnded) {\n      pauseClock();\n      setPomodOrcCycles(previousState => previousState + 1);\n      //Quando o ciclo acabar, o tempo restante é = 0, então o relógio para e muda o estado pra +1.\n    }\n  }, [remainingTime]);\n\n  useEffect(() => {\n    //Definimos os ciclos do relógio, dando que o primeiro ciclo é menor que 1, e que deve resetar esse ciclo quando ele tiver completado os 5 ciclos.\n    const firstCycle = pomodOrcCycles < 1;\n    const shouldRestart = pomodOrcCycles > 5;\n\n    if (!firstCycle) { //Se a primeira cena não retornar nada, reseta o ciclo até ele enviar algo.\n      if (shouldRestart) {\n        restartClock();\n        return;\n      } \n      cycleInformationUpdate(pomodOrcCycles);\n      startClock();\n      //Atualiza a informação do ciclo do pomodoro e faz o relógio dar play depois de atualizar seus ciclos.\n    }\n  }, [pomodOrcCycles]);\n\n  const scaleRef = useRef<HTMLDivElement>(null);\n  const [scaleCircleDiameter, setScaleCircleDiameter] = useState<number>(0);\n  const [scaleCircleRadius, setScaleCircleRadius] = useState<number>(0);\n\n  const setScaleDimensions = () => {\n    if (!scaleRef.current || !scaleRef.current.clientWidth) return;\n    const scaleWrapperWidth = scaleRef.current.clientWidth;\n    setScaleCircleDiameter(scaleWrapperWidth - 40);\n    setScaleCircleRadius(scaleCircleDiameter / 2);\n  };\n\n  useEffect(() => {\n    setScaleDimensions();\n  }, [scaleRef.current, width]);\n  //Parte que encontramos na internet de como fazer o timer ser do formato circular.\n\n  return (\n    <S.ClockWrapper>\n      <S.Frame>\n        <S.Inside>\n          <S.Content>\n            <S.Time\n              fontSizeInPixels={Math.round(scaleCircleDiameter / 3.33)}\n            >\n              {`${remainingMin}:${remainingSecs}`}\n            </S.Time>\n            <S.Button\n              fontSizeInPixels={Math.round(scaleCircleDiameter / 12)}\n              marginTop={Math.round(scaleCircleDiameter * 0.03)}\n              onClick={handleClick}\n            >\n              { timeRunning ? 'Pause' : 'Start' }\n            </S.Button>\n          </S.Content>\n          <S.Gauge\n            circleDiameter={scaleCircleDiameter}\n            percentualPassed={scalePercentual}  \n            ref={scaleRef}\n          >\n            { scaleCircleRadius > 0 && (\n              <svg\n                version=\"1.1\"\n                xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"50%\" cy=\"50%\" r={scaleCircleRadius}/>\n              </svg>\n            )}\n          </S.Gauge>\n        </S.Inside>\n      </S.Frame>\n    </S.ClockWrapper>\n  );\n}\n//Parte que encontramos na internet de como fazer o timer ser do formato circular.\n\nClock.propTypes = {\n  setPomodOrcCycleType: func,\n}\n\nexport default Clock;\n"]},"metadata":{},"sourceType":"module"}